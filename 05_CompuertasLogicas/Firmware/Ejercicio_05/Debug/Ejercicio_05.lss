
Ejercicio_05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_ports>:
	
}
void init_ports(void)
{
	// Entradas
	DDRD  &= ~( _BV(PUSH0) | _BV(PUSH1) );
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8c 7f       	andi	r24, 0xFC	; 252
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD |=  ( _BV(PUSH0) | _BV(PUSH1) );
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	8b b9       	out	0x0b, r24	; 11
	
	// Salidas
	DDRB |=   ( _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4) | _BV(LED5) | _BV(LED6) );
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	8f 63       	ori	r24, 0x3F	; 63
  90:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~( _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4) | _BV(LED5) | _BV(LED6) );
  92:	85 b1       	in	r24, 0x05	; 5
  94:	80 7c       	andi	r24, 0xC0	; 192
  96:	85 b9       	out	0x05, r24	; 5
  98:	08 95       	ret

0000009a <main>:
#define LED6_OFF PORTB &= ~_BV(LED6)

void init_ports(void);
int main(void)
{
    init_ports();
  9a:	0e 94 40 00 	call	0x80	; 0x80 <init_ports>
    while (1) 
    {
		//AND
		if ( read_PUSH0 && read_PUSH1 )
  9e:	48 99       	sbic	0x09, 0	; 9
  a0:	06 c0       	rjmp	.+12     	; 0xae <main+0x14>
  a2:	49 99       	sbic	0x09, 1	; 9
  a4:	04 c0       	rjmp	.+8      	; 0xae <main+0x14>
		{
			LED1_ON;
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0x1a>
		}
		else
		{
			LED1_OFF;
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	85 b9       	out	0x05, r24	; 5
		}
		//NAND
		if ( !(read_PUSH0 && read_PUSH1) )
  b4:	48 99       	sbic	0x09, 0	; 9
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x22>
  b8:	49 9b       	sbis	0x09, 1	; 9
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <main+0x2a>
		{
			LED2_ON;
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	03 c0       	rjmp	.+6      	; 0xca <main+0x30>
		}
		else
		{
			LED2_OFF;
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	85 b9       	out	0x05, r24	; 5
		}
		
		//OR
		if ( read_PUSH0 || read_PUSH1 )
  ca:	48 9b       	sbis	0x09, 0	; 9
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x38>
  ce:	49 99       	sbic	0x09, 1	; 9
  d0:	04 c0       	rjmp	.+8      	; 0xda <main+0x40>
		{
			LED3_ON;
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	85 b9       	out	0x05, r24	; 5
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <main+0x46>
		}
		else
		{
			LED3_OFF;
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	85 b9       	out	0x05, r24	; 5
		}
		//NOR
		if ( !(read_PUSH0 || read_PUSH1) )
  e0:	48 9b       	sbis	0x09, 0	; 9
  e2:	06 c0       	rjmp	.+12     	; 0xf0 <main+0x56>
  e4:	49 9b       	sbis	0x09, 1	; 9
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <main+0x56>
		{
			LED4_ON;
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0x5c>
		}
		else
		{
			LED4_OFF;
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	87 7f       	andi	r24, 0xF7	; 247
  f4:	85 b9       	out	0x05, r24	; 5
		}
		
		//EXOR
		if ( read_PUSH0 != read_PUSH1 )
  f6:	99 b1       	in	r25, 0x09	; 9
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	98 27       	eor	r25, r24
  fc:	91 70       	andi	r25, 0x01	; 1
  fe:	29 b1       	in	r18, 0x09	; 9
 100:	26 95       	lsr	r18
 102:	82 27       	eor	r24, r18
 104:	81 70       	andi	r24, 0x01	; 1
 106:	98 17       	cp	r25, r24
 108:	21 f0       	breq	.+8      	; 0x112 <main+0x78>
		{
			LED5_ON;
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	85 b9       	out	0x05, r24	; 5
 110:	03 c0       	rjmp	.+6      	; 0x118 <main+0x7e>
		}
		else
		{
			LED5_OFF;
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	85 b9       	out	0x05, r24	; 5
		}
		//EXNOR
		if ( !(read_PUSH0 != read_PUSH1) )
 118:	29 b1       	in	r18, 0x09	; 9
 11a:	21 70       	andi	r18, 0x01	; 1
 11c:	89 b1       	in	r24, 0x09	; 9
 11e:	86 95       	lsr	r24
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	89 27       	eor	r24, r25
 124:	81 70       	andi	r24, 0x01	; 1
 126:	28 17       	cp	r18, r24
 128:	21 f0       	breq	.+8      	; 0x132 <main+0x98>
		{
			LED6_ON;
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	85 b9       	out	0x05, r24	; 5
 130:	b6 cf       	rjmp	.-148    	; 0x9e <main+0x4>
		}
		else
		{
			LED6_OFF;
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	85 b9       	out	0x05, r24	; 5
 138:	b2 cf       	rjmp	.-156    	; 0x9e <main+0x4>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
