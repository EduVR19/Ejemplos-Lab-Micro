
10_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d6  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c3  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035a  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000407  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d3  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_1>
   8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:

// Inicializar puertos
void init_ports()
{
	// Entradas
	DDRD  &= ~( _BV(BTN_INT0) | _BV(BTN_INT1) ); // Entrada - 0
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	83 7f       	andi	r24, 0xF3	; 243
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |=  ( _BV(BTN_INT0) | _BV(BTN_INT1) ); // Pull up - HIGH No es necesario por el debounce en hardware
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8c 60       	ori	r24, 0x0C	; 12
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <pwm_init>:


void pwm_init()
{
	//Non-inverting mode
	TCCR1A |=  _BV(COM1A1);
  b4:	e0 e8       	ldi	r30, 0x80	; 128
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
	TCCR1A &=~ _BV(COM1A0);
  be:	80 81       	ld	r24, Z
  c0:	8f 7b       	andi	r24, 0xBF	; 191
  c2:	80 83       	st	Z, r24
	
	//FastPWM mode 10 bit
	//--Modo no invertido canal A PIN B1
	TCCR1A |=   (1<<WGM11) | (1<<WGM10);
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	TCCR1B |=   (1<<WGM12);
  ca:	e1 e8       	ldi	r30, 0x81	; 129
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
	TCCR1B &=  ~_BV(WGM13);
  d4:	80 81       	ld	r24, Z
  d6:	8f 7e       	andi	r24, 0xEF	; 239
  d8:	80 83       	st	Z, r24
	//Prescaler
	//--No prescaler clock interno
	TCCR1B  &=~ _BV(CS12);
  da:	80 81       	ld	r24, Z
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	80 83       	st	Z, r24
	TCCR1B  &=~ _BV(CS11);
  e0:	80 81       	ld	r24, Z
  e2:	8d 7f       	andi	r24, 0xFD	; 253
  e4:	80 83       	st	Z, r24
	TCCR1B  |=  _BV(CS10);
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
	
	//Duty cycle
	OCR1A = 0; //50% 512 = 2.5V -> 100% 1024 = 5V
  ec:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  f4:	08 95       	ret

000000f6 <init_int>:
// Inicializar interrupciones
void init_int()
{
	
	// Control INT0 - Low Mode
	EICRA &= ~( _BV(ISC01) );
  f6:	e9 e6       	ldi	r30, 0x69	; 105
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	80 83       	st	Z, r24
	EICRA &= ~( _BV(ISC00) );
 100:	80 81       	ld	r24, Z
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	80 83       	st	Z, r24
	// EICRA - External Interrupt Control Register A
	// ISC	 - Interrupt Sense Control - Control de Detecci?n de Interrupciones
	// Inicializar INT0
	EIMSK |=  ( _BV(INT0) ); // Habilitar interrupci?n
 106:	8d b3       	in	r24, 0x1d	; 29
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	8d bb       	out	0x1d, r24	; 29
	// EIMSK - External Interrupt Mask
	
	// Control INT1 - Low Mode
	EICRA &= ~( _BV(ISC11) );
 10c:	80 81       	ld	r24, Z
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	80 83       	st	Z, r24
	EICRA &= ~( _BV(ISC10) );
 112:	80 81       	ld	r24, Z
 114:	8b 7f       	andi	r24, 0xFB	; 251
 116:	80 83       	st	Z, r24
	// EICRA - External Interrupt Control Register A
	// ISC	 - Interrupt Sense Control - Control de Detecci?n de Interrupciones
	// Inicializar INT1
	EIMSK |=  ( _BV(INT1) ); // Habilitar interrupci?n
 118:	8d b3       	in	r24, 0x1d	; 29
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	8d bb       	out	0x1d, r24	; 29
 11e:	08 95       	ret

00000120 <main>:
int count = 0;

int main(void)
{

    cli();
 120:	f8 94       	cli
    init_ports();
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	pwm_init();
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <pwm_init>
    init_int();
 12a:	0e 94 7b 00 	call	0xf6	; 0xf6 <init_int>
	DDRB |= (1<<DDB1);
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	82 60       	ori	r24, 0x02	; 2
 132:	84 b9       	out	0x04, r24	; 4
    sei();
 134:	78 94       	sei
	

    while (1) 
    {
		DDRB |= (1<<DDB1);
 136:	84 b1       	in	r24, 0x04	; 4
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	87 e8       	ldi	r24, 0x87	; 135
 13e:	93 e1       	ldi	r25, 0x13	; 19
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x20>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x26>
 146:	00 00       	nop
 148:	f6 cf       	rjmp	.-20     	; 0x136 <main+0x16>

0000014a <__vector_1>:
	// EIMSK - External Interrupt Mask

}

ISR(INT0_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	flag = 1; // Toggle 1 y 0, cada vez que se presiona cambia el valor entre 1 y 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (OCR1A < 1020)
 164:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 168:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 16c:	8c 3f       	cpi	r24, 0xFC	; 252
 16e:	93 40       	sbci	r25, 0x03	; 3
 170:	40 f4       	brcc	.+16     	; 0x182 <__vector_1+0x38>
	{
		OCR1A = OCR1A + 102;	
 172:	e8 e8       	ldi	r30, 0x88	; 136
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	91 81       	ldd	r25, Z+1	; 0x01
 17a:	8a 59       	subi	r24, 0x9A	; 154
 17c:	9f 4f       	sbci	r25, 0xFF	; 255
 17e:	91 83       	std	Z+1, r25	; 0x01
 180:	80 83       	st	Z, r24
	}
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_2>:
// ISR	- Interruption Service Routine - Maneja el desbordamiento
// INTO_vect - External Interrupt Request 0

ISR(INT1_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	flag = 2; // Toggle 1 y 0, cada vez que se presiona cambia el valor entre 1 y 0
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (OCR1A > 0)
 1ae:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1b2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b6:	89 2b       	or	r24, r25
 1b8:	41 f0       	breq	.+16     	; 0x1ca <__vector_2+0x34>
	{
		OCR1A = OCR1A - 102;	
 1ba:	e8 e8       	ldi	r30, 0x88	; 136
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	91 81       	ldd	r25, Z+1	; 0x01
 1c2:	86 56       	subi	r24, 0x66	; 102
 1c4:	91 09       	sbc	r25, r1
 1c6:	91 83       	std	Z+1, r25	; 0x01
 1c8:	80 83       	st	Z, r24
	}

}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
