
09_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ef  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  0000181f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  78:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initialize_ports>:
	}
}
void initialize_ports(void)
{
	//Outputs
	DDRD  = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  84:	1b b8       	out	0x0b, r1	; 11
  86:	08 95       	ret

00000088 <ADC_init>:
}
void ADC_init(void)
{
	//--Referencia +5V
	ADMUX &=~ _BV(REFS1);
  88:	ec e7       	ldi	r30, 0x7C	; 124
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	80 83       	st	Z, r24
	ADMUX |=  _BV(REFS0);
  92:	80 81       	ld	r24, Z
  94:	80 64       	ori	r24, 0x40	; 64
  96:	80 83       	st	Z, r24
	//--Referencia externa
	//ADMUX &=~ _BV(REFS1);
	//ADMUX &=~ _BV(REFS0);
	//Lecutura de 8 bits
	ADMUX |=  _BV(ADLAR);
  98:	80 81       	ld	r24, Z
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	80 83       	st	Z, r24
	
	// Escoger el PIN a leer ADC4
	ADMUX &=~ (1<<MUX3);
  9e:	80 81       	ld	r24, Z
  a0:	87 7f       	andi	r24, 0xF7	; 247
  a2:	80 83       	st	Z, r24
	ADMUX |=  (1<<MUX2);
  a4:	80 81       	ld	r24, Z
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	80 83       	st	Z, r24
	ADMUX &=~ (1<<MUX1);
  aa:	80 81       	ld	r24, Z
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	80 83       	st	Z, r24
	ADMUX &=~ (1<<MUX0);
  b0:	80 81       	ld	r24, Z
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	80 83       	st	Z, r24
	//Freeruning
	ADCSRA |= (1<<ADATE);
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	80 83       	st	Z, r24
	
	//Enable Interrupt
	ADCSRA |= (1<<ADIE);
  c0:	80 81       	ld	r24, Z
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	80 83       	st	Z, r24
	//velocidad de muestreo
	// 1 MHz clock / 8 = 125 kHz ADC clock debe de estar entre 50 - 200Khz
	ADCSRA &=~ (1<<ADPS2);
  c6:	80 81       	ld	r24, Z
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADPS1);
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADPS0);
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <ADC_on>:
	
}
void ADC_on(void)
{
	//Enable ADC
	ADCSRA |=  (1<<ADEN);
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	83 ec       	ldi	r24, 0xC3	; 195
  e6:	99 e0       	ldi	r25, 0x09	; 9
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <ADC_on+0xe>
  ec:	00 c0       	rjmp	.+0      	; 0xee <ADC_on+0x14>
  ee:	00 00       	nop
	
	//Iniciar
	_delay_ms(10); //Precalentamiento
	ADCSRA |=  (1<<ADSC);
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <main>:
void initialize_ports(void);
void ADC_init(void);
void ADC_on(void);
int main(void)
{
	cli();
  f8:	f8 94       	cli
	initialize_ports();
  fa:	0e 94 40 00 	call	0x80	; 0x80 <initialize_ports>
	ADC_init();
  fe:	0e 94 44 00 	call	0x88	; 0x88 <ADC_init>
	sei();
 102:	78 94       	sei
	ADC_on();
 104:	0e 94 6d 00 	call	0xda	; 0xda <ADC_on>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x10>

0000010a <__vector_21>:
	_delay_ms(10); //Precalentamiento
	ADCSRA |=  (1<<ADSC);
}
//Interrupt
ISR(ADC_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	if (ADCH >= 0 && ADCH <= 127) //Rango inferior
 11a:	e9 e7       	ldi	r30, 0x79	; 121
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	14 f0       	brlt	.+4      	; 0x12a <__vector_21+0x20>
	{
		PORTD = 0x0F;
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	8b b9       	out	0x0b, r24	; 11
	}
	if (ADCH >= 128 && ADCH <= 255)//Rango superior
 12a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 12e:	88 23       	and	r24, r24
 130:	24 f4       	brge	.+8      	; 0x13a <__vector_21+0x30>
 132:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	{
		PORTD = 0xF0;
 136:	80 ef       	ldi	r24, 0xF0	; 240
 138:	8b b9       	out	0x0b, r24	; 11
	}
	//PORTD = ADCH; //0 a 5V -> 0 a 255bits
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
