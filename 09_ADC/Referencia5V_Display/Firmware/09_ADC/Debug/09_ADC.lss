
09_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d6  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d7  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000330  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d7  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 84 00 	call	0x108	; 0x108 <main>
  88:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialize_ports>:
	}
}
void initialize_ports(void)
{
	//Outputs
	DDRB  = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  94:	15 b8       	out	0x05, r1	; 5
  96:	08 95       	ret

00000098 <ADC_init>:
}
void ADC_init(void)
{
	//--Referencia +5V
	ADMUX &=~ _BV(REFS1);
  98:	ec e7       	ldi	r30, 0x7C	; 124
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	ADMUX |=  _BV(REFS0);
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
	//--Referencia externa
	//ADMUX &=~ _BV(REFS1);
	//ADMUX &=~ _BV(REFS0);
	//Lecutura de 8 bits
	ADMUX |=  _BV(ADLAR);
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	80 83       	st	Z, r24
	
	// Escoger el PIN a leer ADC4
	ADMUX &=~ (1<<MUX3);
  ae:	80 81       	ld	r24, Z
  b0:	87 7f       	andi	r24, 0xF7	; 247
  b2:	80 83       	st	Z, r24
	ADMUX |=  (1<<MUX2);
  b4:	80 81       	ld	r24, Z
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	80 83       	st	Z, r24
	ADMUX &=~ (1<<MUX1);
  ba:	80 81       	ld	r24, Z
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	80 83       	st	Z, r24
	ADMUX &=~ (1<<MUX0);
  c0:	80 81       	ld	r24, Z
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	80 83       	st	Z, r24
	//Freeruning
	ADCSRA |= (1<<ADATE);
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	80 83       	st	Z, r24
	
	//Enable Interrupt
	ADCSRA |= (1<<ADIE);
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	80 83       	st	Z, r24
	//velocidad de muestreo
	// 1 MHz clock / 8 = 125 kHz ADC clock debe de estar entre 50 - 200Khz
	ADCSRA &=~ (1<<ADPS2);
  d6:	80 81       	ld	r24, Z
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADPS1);
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADPS0);
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <ADC_on>:
	
}
void ADC_on(void)
{
	//Enable ADC
	ADCSRA |=  (1<<ADEN);
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	83 ec       	ldi	r24, 0xC3	; 195
  f6:	99 e0       	ldi	r25, 0x09	; 9
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <ADC_on+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <ADC_on+0x14>
  fe:	00 00       	nop
	
	//Iniciar
	_delay_ms(10); //Precalentamiento
	ADCSRA |=  (1<<ADSC);
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <main>:



int main(void)
{
	cli();
 108:	f8 94       	cli
	initialize_ports();
 10a:	0e 94 48 00 	call	0x90	; 0x90 <initialize_ports>
	ADC_init();
 10e:	0e 94 4c 00 	call	0x98	; 0x98 <ADC_init>
	sei();
 112:	78 94       	sei
	ADC_on();
 114:	0e 94 75 00 	call	0xea	; 0xea <ADC_on>
	while (1)
	{
		PORTB = value;
 118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <value>
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	8f e4       	ldi	r24, 0x4F	; 79
 120:	93 ec       	ldi	r25, 0xC3	; 195
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x1a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x20>
 128:	00 00       	nop
		//DISPLAY2 = estado_0;
		_delay_ms(200);
		value = (valor_ADCH * 9) / 255;		
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 132:	9c 01       	movw	r18, r24
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	22 0f       	add	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	82 0f       	add	r24, r18
 142:	93 1f       	adc	r25, r19
 144:	6f ef       	ldi	r22, 0xFF	; 255
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 c0 00 	call	0x180	; 0x180 <__divmodhi4>
 14c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <value+0x1>
 150:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <value>
 154:	e1 cf       	rjmp	.-62     	; 0x118 <main+0x10>

00000156 <__vector_21>:
	_delay_ms(10); //Precalentamiento
	ADCSRA |=  (1<<ADSC);
}
//Interrupt
ISR(ADC_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
	valor_ADCH = ADCH;
 164:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//value = (ADCH * 9) / 255;
	
	
	//PORTD = ADCH; //0 a 5V -> 0 a 255bits
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__divmodhi4>:
 180:	97 fb       	bst	r25, 7
 182:	07 2e       	mov	r0, r23
 184:	16 f4       	brtc	.+4      	; 0x18a <__divmodhi4+0xa>
 186:	00 94       	com	r0
 188:	07 d0       	rcall	.+14     	; 0x198 <__divmodhi4_neg1>
 18a:	77 fd       	sbrc	r23, 7
 18c:	09 d0       	rcall	.+18     	; 0x1a0 <__divmodhi4_neg2>
 18e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__udivmodhi4>
 192:	07 fc       	sbrc	r0, 7
 194:	05 d0       	rcall	.+10     	; 0x1a0 <__divmodhi4_neg2>
 196:	3e f4       	brtc	.+14     	; 0x1a6 <__divmodhi4_exit>

00000198 <__divmodhi4_neg1>:
 198:	90 95       	com	r25
 19a:	81 95       	neg	r24
 19c:	9f 4f       	sbci	r25, 0xFF	; 255
 19e:	08 95       	ret

000001a0 <__divmodhi4_neg2>:
 1a0:	70 95       	com	r23
 1a2:	61 95       	neg	r22
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255

000001a6 <__divmodhi4_exit>:
 1a6:	08 95       	ret

000001a8 <__udivmodhi4>:
 1a8:	aa 1b       	sub	r26, r26
 1aa:	bb 1b       	sub	r27, r27
 1ac:	51 e1       	ldi	r21, 0x11	; 17
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <__udivmodhi4_ep>

000001b0 <__udivmodhi4_loop>:
 1b0:	aa 1f       	adc	r26, r26
 1b2:	bb 1f       	adc	r27, r27
 1b4:	a6 17       	cp	r26, r22
 1b6:	b7 07       	cpc	r27, r23
 1b8:	10 f0       	brcs	.+4      	; 0x1be <__udivmodhi4_ep>
 1ba:	a6 1b       	sub	r26, r22
 1bc:	b7 0b       	sbc	r27, r23

000001be <__udivmodhi4_ep>:
 1be:	88 1f       	adc	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	5a 95       	dec	r21
 1c4:	a9 f7       	brne	.-22     	; 0x1b0 <__udivmodhi4_loop>
 1c6:	80 95       	com	r24
 1c8:	90 95       	com	r25
 1ca:	bc 01       	movw	r22, r24
 1cc:	cd 01       	movw	r24, r26
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
