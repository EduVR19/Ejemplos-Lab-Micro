
Ej_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_ports>:

void init_ports(void)
{
	// Entradas
	
	DDRD   &= ~( _BV(SW_0) | _BV(SW_1) | _BV(SW_2));
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	88 7f       	andi	r24, 0xF8	; 248
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD |=  ( _BV(SW_0) | _BV(SW_1) | _BV(SW_2)); // pull-up
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	8b b9       	out	0x0b, r24	; 11
	
	DDRD   &= ~( _BV(SW_3) | _BV(SW_4) | _BV(SW_5));
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	87 7c       	andi	r24, 0xC7	; 199
  90:	8a b9       	out	0x0a, r24	; 10
	PORTB &= ~( _BV(SW_3) | _BV(SW_4) | _BV(SW_5)); // pull-down
  92:	85 b1       	in	r24, 0x05	; 5
  94:	87 7c       	andi	r24, 0xC7	; 199
  96:	85 b9       	out	0x05, r24	; 5
		
	// Salidas
	
	DDRB |=  ( _BV(LED0) | _BV(LED1) | _BV(LED2) );
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	84 b9       	out	0x04, r24	; 4
	LEDS &= ~( _BV(LED0) | _BV(LED1) | _BV(LED2) ); // apagadas - source
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	88 7f       	andi	r24, 0xF8	; 248
  a2:	85 b9       	out	0x05, r24	; 5
	
	DDRB |=  ( _BV(LED3) | _BV(LED4) | _BV(LED5) );
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	88 63       	ori	r24, 0x38	; 56
  a8:	84 b9       	out	0x04, r24	; 4
	LEDS |=  ( _BV(LED3) | _BV(LED4) | _BV(LED5) );	// apagadas - sink
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	88 63       	ori	r24, 0x38	; 56
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <main>:

void init_ports(void);

int main(void)
{
	init_ports();
  b2:	0e 94 40 00 	call	0x80	; 0x80 <init_ports>
		
		// PUL UP
		// Se usa una macro para verificar si el puerto está en LOW para encender el primer LED
		// De esta forma funciona bien ya que como el switch está en HIGH no se enciende el LED 
		// hasta que esté en LOW (activando el switch por la pull-up)
		if ( bit_is_clear(SWITCH, SW_0) ) // --> SWITCH & ( _BV(SW_0) ) == 0 --> SWITCH & ( 1 << SW_0 ) == 0
  b6:	48 99       	sbic	0x09, 0	; 9
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <main+0x10>
		{
			LEDS |= _BV(LED0);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	85 b9       	out	0x05, r24	; 5
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <main+0x16>
		}
		else
		{
			LEDS &= ~_BV(LED0);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	85 b9       	out	0x05, r24	; 5
		}
		
		if ( bit_is_clear(SWITCH, SW_1) )
  c8:	49 99       	sbic	0x09, 1	; 9
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <main+0x22>
		{
			LEDS |= _BV(LED1);
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	03 c0       	rjmp	.+6      	; 0xda <main+0x28>
		}
		else
		{
			LEDS &= ~_BV(LED1);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	85 b9       	out	0x05, r24	; 5
		}
		
		if ( bit_is_clear(SWITCH, SW_2) )
  da:	4a 99       	sbic	0x09, 2	; 9
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <main+0x34>
		{
			LEDS |= _BV(LED2);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x3a>
		}
		else
		{
			LEDS &= ~_BV(LED2);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	8b 7f       	andi	r24, 0xFB	; 251
  ea:	85 b9       	out	0x05, r24	; 5
		// PUL DOWN		
		// Como se está utilizando sink en las salidas de los pull-down de optó por dejar la función de 
		// bit is clear, ya que debido a que son pull-down se encuentran en LOW (0) normalmente por lo que en el if
		// el LED se encuentra apagado porque se enciende colocando un LOW (0) y si se colocar un 1 (HIGH) en el botón
		// entonces el bit ahora es set y se colocar un 0 encendiendo el LED
		if ( bit_is_clear(SWITCH, SW_3) )
  ec:	4b 99       	sbic	0x09, 3	; 9
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <main+0x46>
		{
			LEDS |= _BV(LED3);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	03 c0       	rjmp	.+6      	; 0xfe <main+0x4c>
		}
		else
		{
			LEDS &= ~_BV(LED3);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	85 b9       	out	0x05, r24	; 5
		}
				
		if ( bit_is_clear(SWITCH, SW_4) )
  fe:	4c 99       	sbic	0x09, 4	; 9
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x58>
		{
			LEDS |= _BV(LED4);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	80 61       	ori	r24, 0x10	; 16
 106:	85 b9       	out	0x05, r24	; 5
 108:	03 c0       	rjmp	.+6      	; 0x110 <main+0x5e>
		}
		else
		{
			LEDS &= ~_BV(LED4);
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	85 b9       	out	0x05, r24	; 5
		}	
			
		if ( bit_is_clear(SWITCH, SW_5) )
 110:	4d 99       	sbic	0x09, 5	; 9
 112:	04 c0       	rjmp	.+8      	; 0x11c <main+0x6a>
		{
			LEDS |= _BV(LED5);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	80 62       	ori	r24, 0x20	; 32
 118:	85 b9       	out	0x05, r24	; 5
 11a:	cd cf       	rjmp	.-102    	; 0xb6 <main+0x4>
		}
		else
		{
			LEDS &= ~_BV(LED5);
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	85 b9       	out	0x05, r24	; 5
 122:	c9 cf       	rjmp	.-110    	; 0xb6 <main+0x4>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
