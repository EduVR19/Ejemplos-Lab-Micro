
TecladoM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061b  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dc  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_ports>:
void init_ports(void)
{
	
	
	// Entradas
	DDRD &= ~( (1 << BTN_COL1) | (1 << BTN_COL2) | (1 << BTN_COL3) | (1 << BTN_COL4) ); // Declarar entradas
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f 70       	andi	r24, 0x0F	; 15
  84:	8a b9       	out	0x0a, r24	; 10

	// Salidas
	DDRD |=  ( (1 << BTN_ROW1) | (1 << BTN_ROW2) | (1 << BTN_ROW3) | (1 << BTN_ROW4) ); // Declarar entradas
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	8f 60       	ori	r24, 0x0F	; 15
  8a:	8a b9       	out	0x0a, r24	; 10
	DDRB    = 0xFF; // Declarar salidas
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	84 b9       	out	0x04, r24	; 4
	DISPLAY = 0x00; // Colocar en LOW las salidas
  90:	15 b8       	out	0x05, r1	; 5
  92:	08 95       	ret

00000094 <main>:
void init_ports(void);

/*******************Programa principal*********************/
int main(void)
{
	init_ports();
  94:	0e 94 40 00 	call	0x80	; 0x80 <init_ports>
	DISPLAY = CERO;
  98:	8e e7       	ldi	r24, 0x7E	; 126
  9a:	85 b9       	out	0x05, r24	; 5
    while (1) 
    {
		COL_ROWS = (1 << BTN_ROW1);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8b b9       	out	0x0b, r24	; 11
			if (A1) DISPLAY = SIETE;
  a0:	48 9b       	sbis	0x09, 0	; 9
  a2:	04 c0       	rjmp	.+8      	; 0xac <main+0x18>
  a4:	4c 9b       	sbis	0x09, 4	; 9
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x18>
  a8:	80 e7       	ldi	r24, 0x70	; 112
  aa:	85 b9       	out	0x05, r24	; 5
			if (A2) DISPLAY = OCHO;
  ac:	48 9b       	sbis	0x09, 0	; 9
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <main+0x24>
  b0:	4d 9b       	sbis	0x09, 5	; 9
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x24>
  b4:	8f e7       	ldi	r24, 0x7F	; 127
  b6:	85 b9       	out	0x05, r24	; 5
			if (A3) DISPLAY = NUEVE;
  b8:	48 9b       	sbis	0x09, 0	; 9
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <main+0x30>
  bc:	4e 9b       	sbis	0x09, 6	; 9
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x30>
  c0:	83 e7       	ldi	r24, 0x73	; 115
  c2:	85 b9       	out	0x05, r24	; 5
			if (A4) DISPLAY = LETRA_A;
  c4:	48 9b       	sbis	0x09, 0	; 9
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <main+0x3c>
  c8:	4f 9b       	sbis	0x09, 7	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <main+0x3c>
  cc:	87 e7       	ldi	r24, 0x77	; 119
  ce:	85 b9       	out	0x05, r24	; 5
			 
		COL_ROWS = (1 << BTN_ROW2);
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	8b b9       	out	0x0b, r24	; 11
			if (B1) DISPLAY = CUATRO;
  d4:	49 9b       	sbis	0x09, 1	; 9
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <main+0x4c>
  d8:	4c 9b       	sbis	0x09, 4	; 9
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x4c>
  dc:	83 e3       	ldi	r24, 0x33	; 51
  de:	85 b9       	out	0x05, r24	; 5
			if (B2) DISPLAY = CINCO;
  e0:	49 9b       	sbis	0x09, 1	; 9
  e2:	04 c0       	rjmp	.+8      	; 0xec <main+0x58>
  e4:	4d 9b       	sbis	0x09, 5	; 9
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x58>
  e8:	8b e5       	ldi	r24, 0x5B	; 91
  ea:	85 b9       	out	0x05, r24	; 5
			if (B3) DISPLAY = SEIS;
  ec:	49 9b       	sbis	0x09, 1	; 9
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <main+0x64>
  f0:	4e 9b       	sbis	0x09, 6	; 9
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x64>
  f4:	8f e5       	ldi	r24, 0x5F	; 95
  f6:	85 b9       	out	0x05, r24	; 5
			if (B4) DISPLAY = LETRA_B;	
  f8:	49 9b       	sbis	0x09, 1	; 9
  fa:	04 c0       	rjmp	.+8      	; 0x104 <main+0x70>
  fc:	4f 9b       	sbis	0x09, 7	; 9
  fe:	02 c0       	rjmp	.+4      	; 0x104 <main+0x70>
 100:	8f e1       	ldi	r24, 0x1F	; 31
 102:	85 b9       	out	0x05, r24	; 5
		
		
		COL_ROWS = (1 << BTN_ROW3);
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	8b b9       	out	0x0b, r24	; 11
			if (C1) DISPLAY = UNO;
 108:	4a 9b       	sbis	0x09, 2	; 9
 10a:	04 c0       	rjmp	.+8      	; 0x114 <main+0x80>
 10c:	4c 9b       	sbis	0x09, 4	; 9
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x80>
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	85 b9       	out	0x05, r24	; 5
			if (C2) DISPLAY = DOS;
 114:	4a 9b       	sbis	0x09, 2	; 9
 116:	04 c0       	rjmp	.+8      	; 0x120 <main+0x8c>
 118:	4d 9b       	sbis	0x09, 5	; 9
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0x8c>
 11c:	8d e6       	ldi	r24, 0x6D	; 109
 11e:	85 b9       	out	0x05, r24	; 5
			if (C3) DISPLAY = TRES;
 120:	4a 9b       	sbis	0x09, 2	; 9
 122:	04 c0       	rjmp	.+8      	; 0x12c <main+0x98>
 124:	4e 9b       	sbis	0x09, 6	; 9
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0x98>
 128:	89 e7       	ldi	r24, 0x79	; 121
 12a:	85 b9       	out	0x05, r24	; 5
			if (C4) DISPLAY = LETRA_C;
 12c:	4a 9b       	sbis	0x09, 2	; 9
 12e:	04 c0       	rjmp	.+8      	; 0x138 <main+0xa4>
 130:	4f 9b       	sbis	0x09, 7	; 9
 132:	02 c0       	rjmp	.+4      	; 0x138 <main+0xa4>
 134:	8e e4       	ldi	r24, 0x4E	; 78
 136:	85 b9       	out	0x05, r24	; 5
		
		
		COL_ROWS = (1 << BTN_ROW4);
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	8b b9       	out	0x0b, r24	; 11
			if (D1) DISPLAY = LETRA_D;
 13c:	4b 9b       	sbis	0x09, 3	; 9
 13e:	04 c0       	rjmp	.+8      	; 0x148 <main+0xb4>
 140:	4c 9b       	sbis	0x09, 4	; 9
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0xb4>
 144:	8d e3       	ldi	r24, 0x3D	; 61
 146:	85 b9       	out	0x05, r24	; 5
			if (D2) DISPLAY = CERO;
 148:	4b 9b       	sbis	0x09, 3	; 9
 14a:	04 c0       	rjmp	.+8      	; 0x154 <main+0xc0>
 14c:	4d 9b       	sbis	0x09, 5	; 9
 14e:	02 c0       	rjmp	.+4      	; 0x154 <main+0xc0>
 150:	8e e7       	ldi	r24, 0x7E	; 126
 152:	85 b9       	out	0x05, r24	; 5
			if (D3) DISPLAY = LETRA_E;
 154:	4b 9b       	sbis	0x09, 3	; 9
 156:	04 c0       	rjmp	.+8      	; 0x160 <main+0xcc>
 158:	4e 9b       	sbis	0x09, 6	; 9
 15a:	02 c0       	rjmp	.+4      	; 0x160 <main+0xcc>
 15c:	8f e4       	ldi	r24, 0x4F	; 79
 15e:	85 b9       	out	0x05, r24	; 5
			if (D4) DISPLAY = LETRA_F;
 160:	4b 9b       	sbis	0x09, 3	; 9
 162:	9c cf       	rjmp	.-200    	; 0x9c <main+0x8>
 164:	4f 9b       	sbis	0x09, 7	; 9
 166:	9a cf       	rjmp	.-204    	; 0x9c <main+0x8>
 168:	87 e4       	ldi	r24, 0x47	; 71
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	97 cf       	rjmp	.-210    	; 0x9c <main+0x8>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
