
Ej04_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b6  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071a  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000483  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e7  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 29 01 	call	0x252	; 0x252 <main>
  9e:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:
//impares     : muestra solamente los números impares en el	*
//				contador									*
//***********************************************************
void init_ports(void)
{
	estado = estado_0; // Inicializar estado en estado 0
  a6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <estado>
	
	// Entradas
	DDRB &= ~( _BV(BTN_0) | _BV(BTN_1) ); // Declarar entradass
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	84 b9       	out	0x04, r24	; 4
	BTN  |=  ( _BV(BTN_0) | _BV(BTN_1) ); // Activar las pull-up
  b0:	83 b1       	in	r24, 0x03	; 3
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	83 b9       	out	0x03, r24	; 3
	
	// Salidas
	DDRD    = 0xFF; // Declarar salidas
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10
	DISPLAY = 0x00; // Colocar en LOW las salidas
  ba:	1b b8       	out	0x0b, r1	; 11
  bc:	08 95       	ret

000000be <lectura>:
	
}
void lectura(void)
{
	// leer si el botón 0 está vacío (0), como está en HIGH devolverá un 0
	uint8_t read_0 = bit_is_clear(BTN, BTN_0);
  be:	83 b1       	in	r24, 0x03	; 3
  c0:	81 70       	andi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	e7 e8       	ldi	r30, 0x87	; 135
  c4:	f3 e1       	ldi	r31, 0x13	; 19
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lectura+0x8>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lectura+0xe>
  cc:	00 00       	nop
	_delay_ms(20);
	// leer si el botón 1 está vacío (0), como está en HIGH devolverá un 0
	uint8_t read_1 = bit_is_clear(BTN, BTN_1);
  ce:	93 b1       	in	r25, 0x03	; 3
  d0:	92 70       	andi	r25, 0x02	; 2
  d2:	e7 e8       	ldi	r30, 0x87	; 135
  d4:	f3 e1       	ldi	r31, 0x13	; 19
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lectura+0x18>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lectura+0x1e>
  dc:	00 00       	nop
	_delay_ms(20);
	
	// condiciones de 4 combinaciones para activar cada estado
	if ( read_0 == 0 && read_1 == 0 ) estado = estado_0;
  de:	88 23       	and	r24, r24
  e0:	29 f0       	breq	.+10     	; 0xec <lectura+0x2e>
  e2:	99 23       	and	r25, r25
  e4:	19 f0       	breq	.+6      	; 0xec <lectura+0x2e>
  e6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <estado>
  ea:	08 95       	ret
		else if ( read_0 == 1 && read_1 == 0 ) estado = estado_1;
  ec:	81 11       	cpse	r24, r1
  ee:	06 c0       	rjmp	.+12     	; 0xfc <lectura+0x3e>
  f0:	99 23       	and	r25, r25
  f2:	21 f0       	breq	.+8      	; 0xfc <lectura+0x3e>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <estado>
  fa:	08 95       	ret
			else if ( read_0 == 0 && read_1 == 1 ) estado = estado_2;
  fc:	88 23       	and	r24, r24
  fe:	31 f0       	breq	.+12     	; 0x10c <lectura+0x4e>
 100:	91 11       	cpse	r25, r1
 102:	04 c0       	rjmp	.+8      	; 0x10c <lectura+0x4e>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <estado>
 10a:	08 95       	ret
				else if ( read_0 == 1 && read_1 == 1 ) estado = estado_3;
 10c:	81 11       	cpse	r24, r1
 10e:	05 c0       	rjmp	.+10     	; 0x11a <lectura+0x5c>
 110:	91 11       	cpse	r25, r1
 112:	03 c0       	rjmp	.+6      	; 0x11a <lectura+0x5c>
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <estado>
 11a:	08 95       	ret

0000011c <ascendente>:

}
void ascendente(void)
{
	while (estado == estado_0)
 11c:	23 c0       	rjmp	.+70     	; 0x164 <ascendente+0x48>
	{		
		DISPLAY = numeros[i];
 11e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e0 50       	subi	r30, 0x00	; 0
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	2f e3       	ldi	r18, 0x3F	; 63
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <ascendente+0x16>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <ascendente+0x20>
 13c:	00 00       	nop
		_delay_ms(TIME);

		// Lectura para comprobar cambio de estado, si se cambia sale del loop
		lectura();
 13e:	0e 94 5f 00 	call	0xbe	; 0xbe <lectura>
		if (estado == estado_1 || estado == estado_2 || estado == estado_3)
 142:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 146:	81 50       	subi	r24, 0x01	; 1
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	80 f0       	brcs	.+32     	; 0x16c <ascendente+0x50>
		{
			break;
		}
		
		// Candado para reiniciar el contador
		if (i == 9)
 14c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 150:	89 30       	cpi	r24, 0x09	; 9
 152:	19 f4       	brne	.+6      	; 0x15a <ascendente+0x3e>
		{
			i = -1;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		}
		// Aumentar el contador en 1
		i++;
 15a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
				else if ( read_0 == 1 && read_1 == 1 ) estado = estado_3;

}
void ascendente(void)
{
	while (estado == estado_0)
 164:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 168:	88 23       	and	r24, r24
 16a:	c9 f2       	breq	.-78     	; 0x11e <ascendente+0x2>
 16c:	08 95       	ret

0000016e <descendente>:

	}
}
void descendente(void)
{
	while (estado == estado_1)
 16e:	26 c0       	rjmp	.+76     	; 0x1bc <descendente+0x4e>
	{		
		DISPLAY = numeros[i];
 170:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e0 50       	subi	r30, 0x00	; 0
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 81       	ld	r24, Z
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	2f e3       	ldi	r18, 0x3F	; 63
 180:	8d e0       	ldi	r24, 0x0D	; 13
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <descendente+0x16>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <descendente+0x20>
 18e:	00 00       	nop
		_delay_ms(TIME);

		// Lectura para comprobar cambio de estado, si se cambia sale del loop
		lectura();
 190:	0e 94 5f 00 	call	0xbe	; 0xbe <lectura>
		if (estado == estado_0 || estado == estado_2 || estado == estado_3)
 194:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 198:	88 23       	and	r24, r24
 19a:	a1 f0       	breq	.+40     	; 0x1c4 <descendente+0x56>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	91 f0       	breq	.+36     	; 0x1c4 <descendente+0x56>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	81 f0       	breq	.+32     	; 0x1c4 <descendente+0x56>
		{
			break;
		}
		// Candado para reiniciar el contador
		if (i == 0)
 1a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1a8:	81 11       	cpse	r24, r1
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <descendente+0x44>
		{
			i = 10;
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		}
		
		// Aumentar el contador en 1
		i--;
 1b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

	}
}
void descendente(void)
{
	while (estado == estado_1)
 1bc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	b1 f2       	breq	.-84     	; 0x170 <descendente+0x2>
 1c4:	08 95       	ret

000001c6 <velocidad>:
	}
}

void velocidad(void)
{
	while (estado == estado_2)
 1c6:	24 c0       	rjmp	.+72     	; 0x210 <velocidad+0x4a>
	{
		DISPLAY = numeros[i];
 1c8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	e0 50       	subi	r30, 0x00	; 0
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	80 81       	ld	r24, Z
 1d4:	8b b9       	out	0x0b, r24	; 11
 1d6:	2f e5       	ldi	r18, 0x5F	; 95
 1d8:	8a ee       	ldi	r24, 0xEA	; 234
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <velocidad+0x16>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <velocidad+0x20>
 1e6:	00 00       	nop
		_delay_ms(300);

		// Lectura para comprobar cambio de estado, si se cambia sale del loop
		lectura();
 1e8:	0e 94 5f 00 	call	0xbe	; 0xbe <lectura>
		if (estado == estado_0 || estado == estado_1 || estado == estado_3)
 1ec:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	90 f0       	brcs	.+36     	; 0x218 <velocidad+0x52>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	81 f0       	breq	.+32     	; 0x218 <velocidad+0x52>
		{
			break;
		}
		
		// Candado para reiniciar el contador
		if (i == 9)
 1f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1fc:	89 30       	cpi	r24, 0x09	; 9
 1fe:	19 f4       	brne	.+6      	; 0x206 <velocidad+0x40>
		{
			i = -1;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		}
		// Aumentar el contador en 1
		i++;
 206:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	}
}

void velocidad(void)
{
	while (estado == estado_2)
 210:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	c1 f2       	breq	.-80     	; 0x1c8 <velocidad+0x2>
 218:	08 95       	ret

0000021a <stop>:
	}
}

void stop(void)
{
	while (estado == estado_3)
 21a:	16 c0       	rjmp	.+44     	; 0x248 <stop+0x2e>
	{
		DISPLAY = numeros[i];
 21c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e0 50       	subi	r30, 0x00	; 0
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	8b b9       	out	0x0b, r24	; 11
 22a:	2f e3       	ldi	r18, 0x3F	; 63
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <stop+0x16>
 238:	00 c0       	rjmp	.+0      	; 0x23a <stop+0x20>
 23a:	00 00       	nop
		_delay_ms(TIME);

		// Lectura para comprobar cambio de estado, si se cambia sale del loop
		lectura();
 23c:	0e 94 5f 00 	call	0xbe	; 0xbe <lectura>
		if (estado == estado_0 || estado == estado_1 || estado == estado_2)
 240:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	20 f0       	brcs	.+8      	; 0x250 <stop+0x36>
	}
}

void stop(void)
{
	while (estado == estado_3)
 248:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	31 f3       	breq	.-52     	; 0x21c <stop+0x2>
 250:	08 95       	ret

00000252 <main>:


/*******************Programa principal*********************/
int main(void)
{
	init_ports();
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
    while (1) 
    {
		lectura();
 256:	0e 94 5f 00 	call	0xbe	; 0xbe <lectura>

		switch(estado)
 25a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <estado>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	49 f0       	breq	.+18     	; 0x274 <main+0x22>
 262:	28 f0       	brcs	.+10     	; 0x26e <main+0x1c>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	49 f0       	breq	.+18     	; 0x27a <main+0x28>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	51 f0       	breq	.+20     	; 0x280 <main+0x2e>
 26c:	f4 cf       	rjmp	.-24     	; 0x256 <main+0x4>
		{
			case estado_0:
				ascendente();
 26e:	0e 94 8e 00 	call	0x11c	; 0x11c <ascendente>
			break;
 272:	f1 cf       	rjmp	.-30     	; 0x256 <main+0x4>
			
			case estado_1:
				descendente();
 274:	0e 94 b7 00 	call	0x16e	; 0x16e <descendente>
			break;	
 278:	ee cf       	rjmp	.-36     	; 0x256 <main+0x4>
			
			case estado_2:
				velocidad();
 27a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <velocidad>
			break;
 27e:	eb cf       	rjmp	.-42     	; 0x256 <main+0x4>

			case estado_3:
				stop();
 280:	0e 94 0d 01 	call	0x21a	; 0x21a <stop>
			break;
 284:	e8 cf       	rjmp	.-48     	; 0x256 <main+0x4>

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
