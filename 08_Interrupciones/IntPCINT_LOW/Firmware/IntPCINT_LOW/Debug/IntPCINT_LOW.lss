
IntPCINT_LOW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000832  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d5  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034f  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ad6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  9e:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:

// Inicializar puertos
void init_ports()
{
	// Entradas
	DDRD  &= ~( _BV(BTN_INT0) ); // Entrada - 0
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |=  ( _BV(BTN_INT0) ); // Pull up - HIGH No es necesario por el debounce en hardware
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	8b b9       	out	0x0b, r24	; 11
	
	// Salidas
	DDRB  |=  ( _BV(LED0) | _BV(LED1) | _BV(LED2) | _BV(LED3) );	// Salidas - 1
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	8f 60       	ori	r24, 0x0F	; 15
  b6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~( _BV(LED0) | _BV(LED1) | _BV(LED2) | _BV(LED3) );	// Salidas - Source - LOW
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret

000000c0 <init_int>:
	//// EICRA - External Interrupt Control Register A
	//// ISC	 - Interrupt Sense Control - Control de Detecci?n de Interrupciones
	//
	
	// Inicializar INT0
	PCICR |=  ( _BV(PCIE2) ); // Habilitar interrupci?n
  c0:	e8 e6       	ldi	r30, 0x68	; 104
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
	//// Inicializar INT0
	//PCIFR |=  ( _BV(PCIF2) ); // Habilitar interrupci?n
	//// EIMSK - External Interrupt Mask
	
	// Inicializar INT0
	PCMSK2 |=  ( _BV(PCINT16) ); // Habilitar interrupci?n
  ca:	ed e6       	ldi	r30, 0x6D	; 109
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <main>:

const int TIME = 500;

int main(void)
{
	cli();
  d6:	f8 94       	cli
	init_ports();
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	init_int();
  dc:	0e 94 60 00 	call	0xc0	; 0xc0 <init_int>
	flag = 0;
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
  e4:	78 94       	sei

	while (1)
	{
		
		if ( flag == 1 )
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	59 f5       	brne	.+86     	; 0x144 <main+0x6e>
		{
			LED0_ON;
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	85 b9       	out	0x05, r24	; 5
			LED2_ON;
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	85 b9       	out	0x05, r24	; 5
			LED1_OFF;
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	85 b9       	out	0x05, r24	; 5
			LED3_OFF;
 100:	85 b1       	in	r24, 0x05	; 5
 102:	87 7f       	andi	r24, 0xF7	; 247
 104:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f e9       	ldi	r18, 0x9F	; 159
 108:	86 e8       	ldi	r24, 0x86	; 134
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x36>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x40>
 116:	00 00       	nop
			_delay_ms(TIME);
			LED0_OFF;
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	85 b9       	out	0x05, r24	; 5
			LED2_OFF;
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	85 b9       	out	0x05, r24	; 5
			LED1_ON;
 124:	85 b1       	in	r24, 0x05	; 5
 126:	82 60       	ori	r24, 0x02	; 2
 128:	85 b9       	out	0x05, r24	; 5
			LED3_ON;
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	85 b9       	out	0x05, r24	; 5
 130:	2f e9       	ldi	r18, 0x9F	; 159
 132:	86 e8       	ldi	r24, 0x86	; 134
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x60>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x6a>
 140:	00 00       	nop
 142:	d1 cf       	rjmp	.-94     	; 0xe6 <main+0x10>
			_delay_ms(TIME);
		}
		else if ( flag == 0 )
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	81 11       	cpse	r24, r1
 14a:	cd cf       	rjmp	.-102    	; 0xe6 <main+0x10>
		{
			LED0_ON;
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	85 b9       	out	0x05, r24	; 5
			LED1_ON;
 152:	85 b1       	in	r24, 0x05	; 5
 154:	82 60       	ori	r24, 0x02	; 2
 156:	85 b9       	out	0x05, r24	; 5
			LED2_ON;
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	85 b9       	out	0x05, r24	; 5
			LED3_ON;
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	88 60       	ori	r24, 0x08	; 8
 162:	85 b9       	out	0x05, r24	; 5
 164:	2f e9       	ldi	r18, 0x9F	; 159
 166:	86 e8       	ldi	r24, 0x86	; 134
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x94>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x9e>
 174:	00 00       	nop
			_delay_ms(TIME);
			LED0_OFF;
 176:	85 b1       	in	r24, 0x05	; 5
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	85 b9       	out	0x05, r24	; 5
			LED1_OFF;
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	85 b9       	out	0x05, r24	; 5
			LED2_OFF;
 182:	85 b1       	in	r24, 0x05	; 5
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	85 b9       	out	0x05, r24	; 5
			LED3_OFF;
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	2f e9       	ldi	r18, 0x9F	; 159
 190:	86 e8       	ldi	r24, 0x86	; 134
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0xbe>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xc8>
 19e:	00 00       	nop
 1a0:	a2 cf       	rjmp	.-188    	; 0xe6 <main+0x10>

000001a2 <__vector_5>:
	// EIMSK - External Interrupt Mask

}

ISR(PCINT2_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25

	flag = 1 - flag; // Toggle 1 y 0, cada vez que se presiona cambia el valor entre 1 y 0
 1b0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	89 1b       	sub	r24, r25
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

}
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
