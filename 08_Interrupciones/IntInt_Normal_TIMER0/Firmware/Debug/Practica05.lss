
Practica05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000702  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062c  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029a  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c4  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  88:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ports>:
}

void init_ports()
{
	// Salidas
	DDRB  |=  _BV(LED);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	81 60       	ori	r24, 0x01	; 1
  94:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~_BV(LED);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	08 95       	ret

0000009e <init_timer0>:
}
void init_timer0()
{
	// Normal			- 0 0 0
	TCCR0A &= ~( _BV(WGM00) );	// 0
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~( _BV(WGM01) );	// 0
  a4:	84 b5       	in	r24, 0x24	; 36
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~( _BV(WGM02) );	// 0
  aa:	85 b5       	in	r24, 0x25	; 37
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	85 bd       	out	0x25, r24	; 37
  b0:	08 95       	ret

000000b2 <timer0_on>:
}
void timer0_on()
{
	// Encendido
	
	TCNT0 = 0;
  b2:	16 bc       	out	0x26, r1	; 38
	// TCN0 - Timer Counter Register
	
	// Prescaler 1024	- 1 0 1
	TCCR0B |=  ( _BV(CS00) );	// 1
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~( _BV(CS01) );	// 0
  ba:	85 b5       	in	r24, 0x25	; 37
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	85 bd       	out	0x25, r24	; 37
	TCCR0B |=  ( _BV(CS02) );	// 1
  c0:	85 b5       	in	r24, 0x25	; 37
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	85 bd       	out	0x25, r24	; 37
  c6:	08 95       	ret

000000c8 <main>:
void timer0_on();
void timer0_off();

int main(void)
{
	cli(); // Clear Interruptions
  c8:	f8 94       	cli
	init_ports();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <init_ports>
	init_timer0();
  ce:	0e 94 4f 00 	call	0x9e	; 0x9e <init_timer0>
	timer0_on();
  d2:	0e 94 59 00 	call	0xb2	; 0xb2 <timer0_on>
	sei(); // Set Interruptions
  d6:	78 94       	sei
    while (1) 
    {
		if ( TCNT0 == 97 ) //0.1 segundos
  d8:	86 b5       	in	r24, 0x26	; 38
  da:	81 36       	cpi	r24, 0x61	; 97
  dc:	e9 f7       	brne	.-6      	; 0xd8 <main+0x10>
		{
			counter++;
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			TCNT0 = 0;
  e8:	16 bc       	out	0x26, r1	; 38
			
			if ( counter == 5 )
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	99 f7       	brne	.-26     	; 0xd8 <main+0x10>
			{
				LED_TGLE;
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	89 27       	eor	r24, r25
  f8:	85 b9       	out	0x05, r24	; 5
				counter = 0;
  fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	ec cf       	rjmp	.-40     	; 0xd8 <main+0x10>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
