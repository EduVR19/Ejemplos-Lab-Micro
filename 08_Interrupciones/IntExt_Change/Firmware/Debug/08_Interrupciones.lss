
08_Interrupciones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000832  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d5  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000355  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  000019b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  9e:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:

// Inicializar puertos
void init_ports()
{
	// Entradas
	DDRD  &= ~( _BV(BTN_INT0) ); // Entrada - 0
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	8a b9       	out	0x0a, r24	; 10
	PORTD |=  ( _BV(BTN_INT0) ); // Pull up - HIGH No es necesario por el debounce en hardware
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	8b b9       	out	0x0b, r24	; 11
	
	// Salidas
	DDRB  |=  ( _BV(LED0) | _BV(LED1) | _BV(LED2) | _BV(LED3) );	// Salidas - 1
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	8f 60       	ori	r24, 0x0F	; 15
  b6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~( _BV(LED0) | _BV(LED1) | _BV(LED2) | _BV(LED3) );	// Salidas - Source - LOW
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	80 7f       	andi	r24, 0xF0	; 240
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret

000000c0 <init_int>:
// Inicializar interrupciones
void init_int()
{
	
	// Control INT0 - Change Mode
	EICRA &= ~( _BV(ISC01) );
  c0:	e9 e6       	ldi	r30, 0x69	; 105
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	80 83       	st	Z, r24
	EICRA |=  ( _BV(ISC00) );
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	80 83       	st	Z, r24
	
	
	// Inicialiar INT0
	EIMSK |=  ( _BV(INT0) );
  d0:	8d b3       	in	r24, 0x1d	; 29
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8d bb       	out	0x1d, r24	; 29
  d6:	08 95       	ret

000000d8 <main>:

const int TIME = 500;

int main(void)
{
    cli();
  d8:	f8 94       	cli
	init_ports();
  da:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	init_int();
  de:	0e 94 60 00 	call	0xc0	; 0xc0 <init_int>
	flag = 0;
  e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
  e6:	78 94       	sei

    while (1) 
    {
		
		if ( flag == 1 )
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	59 f5       	brne	.+86     	; 0x146 <main+0x6e>
		{	
				LED0_ON;
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	85 b9       	out	0x05, r24	; 5
				LED2_ON;
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	85 b9       	out	0x05, r24	; 5
				LED1_OFF;
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8d 7f       	andi	r24, 0xFD	; 253
 100:	85 b9       	out	0x05, r24	; 5
				LED3_OFF;
 102:	85 b1       	in	r24, 0x05	; 5
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f e9       	ldi	r18, 0x9F	; 159
 10a:	86 e8       	ldi	r24, 0x86	; 134
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x36>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x40>
 118:	00 00       	nop
				_delay_ms(TIME);
				LED0_OFF;
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8e 7f       	andi	r24, 0xFE	; 254
 11e:	85 b9       	out	0x05, r24	; 5
				LED2_OFF;
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	85 b9       	out	0x05, r24	; 5
				LED1_ON;
 126:	85 b1       	in	r24, 0x05	; 5
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	85 b9       	out	0x05, r24	; 5
				LED3_ON;
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	85 b9       	out	0x05, r24	; 5
 132:	2f e9       	ldi	r18, 0x9F	; 159
 134:	86 e8       	ldi	r24, 0x86	; 134
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x60>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x6a>
 142:	00 00       	nop
 144:	d1 cf       	rjmp	.-94     	; 0xe8 <main+0x10>
				_delay_ms(TIME);
		}
		else if ( flag == 0 )
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14a:	81 11       	cpse	r24, r1
 14c:	cd cf       	rjmp	.-102    	; 0xe8 <main+0x10>
		{
				LED0_ON;
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 b9       	out	0x05, r24	; 5
				LED1_ON;
 154:	85 b1       	in	r24, 0x05	; 5
 156:	82 60       	ori	r24, 0x02	; 2
 158:	85 b9       	out	0x05, r24	; 5
				LED2_ON;
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	84 60       	ori	r24, 0x04	; 4
 15e:	85 b9       	out	0x05, r24	; 5
				LED3_ON;
 160:	85 b1       	in	r24, 0x05	; 5
 162:	88 60       	ori	r24, 0x08	; 8
 164:	85 b9       	out	0x05, r24	; 5
 166:	2f e9       	ldi	r18, 0x9F	; 159
 168:	86 e8       	ldi	r24, 0x86	; 134
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x94>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x9e>
 176:	00 00       	nop
				_delay_ms(TIME);
				LED0_OFF;
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	85 b9       	out	0x05, r24	; 5
				LED1_OFF;
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	85 b9       	out	0x05, r24	; 5
				LED2_OFF;
 184:	85 b1       	in	r24, 0x05	; 5
 186:	8b 7f       	andi	r24, 0xFB	; 251
 188:	85 b9       	out	0x05, r24	; 5
				LED3_OFF;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	87 7f       	andi	r24, 0xF7	; 247
 18e:	85 b9       	out	0x05, r24	; 5
 190:	2f e9       	ldi	r18, 0x9F	; 159
 192:	86 e8       	ldi	r24, 0x86	; 134
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0xbe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0xc8>
 1a0:	00 00       	nop
 1a2:	a2 cf       	rjmp	.-188    	; 0xe8 <main+0x10>

000001a4 <__vector_1>:
	EIMSK |=  ( _BV(INT0) );

}

ISR(INT0_vect)
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25

	flag = 1 - flag; // Toggle 1 y 0, cada vez que se presiona cambia el valor entre 1 y 0
 1b2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	89 1b       	sub	r24, r25
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
