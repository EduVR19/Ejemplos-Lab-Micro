
Ext_int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000022e  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010a  0080010a  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000823  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d3  00000000  00000000  00000bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a3  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ae3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9e:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:

void init_ports(void)
{
//--Outputs
	//--DISPLAY
	DDRD = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	DDRB |= _BV(B1) | _BV(B2) | _BV(B3) | _BV(B4);
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	84 b9       	out	0x04, r24	; 4
  b0:	08 95       	ret

000000b2 <main>:
uint8_t numeros[10] ={0xFC,0x60,0xDA,0xF2,0x66,0xB6,0xBE,0xE0,0xFE,0xE6};
uint8_t selector[4];	
////////////-----MAIN-----//////////////////
int main(void)
{
	cli();
  b2:	f8 94       	cli
	init_ports();
  b4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	timer0_init();
  b8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <timer0_init>
	sei();
  bc:	78 94       	sei
	timer0_on();
  be:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <timer0_on>
	while (1)
	{     //1234	
		z = 1234;
  c2:	82 ed       	ldi	r24, 0xD2	; 210
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <z+0x1>
  ca:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <z>
		selector[0] =  z / 1000; // Display millares 1
  ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <z>
  d2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <z+0x1>
  d6:	28 ee       	ldi	r18, 0xE8	; 232
  d8:	33 e0       	ldi	r19, 0x03	; 3
  da:	b9 01       	movw	r22, r18
  dc:	0e 94 ed 00 	call	0x1da	; 0x1da <__divmodhi4>
  e0:	ef e0       	ldi	r30, 0x0F	; 15
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	60 83       	st	Z, r22
		selector[1] = (z % 1000)/100; // Display centenas 2
  e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <z>
  ea:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <z+0x1>
  ee:	b9 01       	movw	r22, r18
  f0:	0e 94 ed 00 	call	0x1da	; 0x1da <__divmodhi4>
  f4:	24 e6       	ldi	r18, 0x64	; 100
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	b9 01       	movw	r22, r18
  fa:	0e 94 ed 00 	call	0x1da	; 0x1da <__divmodhi4>
  fe:	61 83       	std	Z+1, r22	; 0x01
		selector[2] = (z % 100)/10; // Display decenas 3
 100:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <z>
 104:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <z+0x1>
 108:	b9 01       	movw	r22, r18
 10a:	0e 94 ed 00 	call	0x1da	; 0x1da <__divmodhi4>
 10e:	2a e0       	ldi	r18, 0x0A	; 10
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	b9 01       	movw	r22, r18
 114:	0e 94 ed 00 	call	0x1da	; 0x1da <__divmodhi4>
 118:	62 83       	std	Z+2, r22	; 0x02
		selector[3] =  z % 10; // Display unidades 4
 11a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <z>
 11e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <z+0x1>
 122:	b9 01       	movw	r22, r18
 124:	0e 94 ed 00 	call	0x1da	; 0x1da <__divmodhi4>
 128:	83 83       	std	Z+3, r24	; 0x03
		PORTB = ~(1<<i);
 12a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 12e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <main+0x8a>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <main+0x86>
 140:	80 95       	com	r24
 142:	85 b9       	out	0x05, r24	; 5
		DISPLAY = numeros[selector[i]];
 144:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 148:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 14c:	e1 5f       	subi	r30, 0xF1	; 241
 14e:	fe 4f       	sbci	r31, 0xFE	; 254
 150:	e0 81       	ld	r30, Z
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	b2 cf       	rjmp	.-156    	; 0xc2 <main+0x10>

0000015e <__vector_14>:
	DDRB |= _BV(B1) | _BV(B2) | _BV(B3) | _BV(B4);
	
}

ISR (TIMER0_COMPA_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
	if (i >= 3)
 16c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 170:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 174:	03 97       	sbiw	r24, 0x03	; 3
 176:	2c f0       	brlt	.+10     	; 0x182 <__vector_14+0x24>
	{
		i = 0;
 178:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 17c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 180:	09 c0       	rjmp	.+18     	; 0x194 <__vector_14+0x36>
	}
	else
	{
		i++;
 182:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 186:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 190:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	}
}
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <timer0_init>:
#include "timer0.h"

void timer0_init(void)
{
	// Modo CTC
	TCCR0A &=~_BV(WGM00);
 1a2:	84 b5       	in	r24, 0x24	; 36
 1a4:	8e 7f       	andi	r24, 0xFE	; 254
 1a6:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= _BV(WGM01);
 1a8:	84 b5       	in	r24, 0x24	; 36
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	84 bd       	out	0x24, r24	; 36
	TCCR0B &=~_BV(WGM02);
 1ae:	85 b5       	in	r24, 0x25	; 37
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	85 bd       	out	0x25, r24	; 37
	//Top
	OCR0A = 42; //60hz
 1b4:	8a e2       	ldi	r24, 0x2A	; 42
 1b6:	87 bd       	out	0x27, r24	; 39
	//Enable
	TIMSK0   |= _BV(OCIE0A);
 1b8:	ee e6       	ldi	r30, 0x6E	; 110
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <timer0_on>:
}

void timer0_on()
{
	//
	TCNT0 = 0; //conteo se reinicia
 1c4:	16 bc       	out	0x26, r1	; 38
	//Prescaler 1024
	TCCR0B |= _BV(CS00);
 1c6:	85 b5       	in	r24, 0x25	; 37
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	85 bd       	out	0x25, r24	; 37
	TCCR0B &=~_BV(CS01);
 1cc:	85 b5       	in	r24, 0x25	; 37
 1ce:	8d 7f       	andi	r24, 0xFD	; 253
 1d0:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= _BV(CS02);
 1d2:	85 b5       	in	r24, 0x25	; 37
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	85 bd       	out	0x25, r24	; 37
 1d8:	08 95       	ret

000001da <__divmodhi4>:
 1da:	97 fb       	bst	r25, 7
 1dc:	07 2e       	mov	r0, r23
 1de:	16 f4       	brtc	.+4      	; 0x1e4 <__divmodhi4+0xa>
 1e0:	00 94       	com	r0
 1e2:	07 d0       	rcall	.+14     	; 0x1f2 <__divmodhi4_neg1>
 1e4:	77 fd       	sbrc	r23, 7
 1e6:	09 d0       	rcall	.+18     	; 0x1fa <__divmodhi4_neg2>
 1e8:	0e 94 01 01 	call	0x202	; 0x202 <__udivmodhi4>
 1ec:	07 fc       	sbrc	r0, 7
 1ee:	05 d0       	rcall	.+10     	; 0x1fa <__divmodhi4_neg2>
 1f0:	3e f4       	brtc	.+14     	; 0x200 <__divmodhi4_exit>

000001f2 <__divmodhi4_neg1>:
 1f2:	90 95       	com	r25
 1f4:	81 95       	neg	r24
 1f6:	9f 4f       	sbci	r25, 0xFF	; 255
 1f8:	08 95       	ret

000001fa <__divmodhi4_neg2>:
 1fa:	70 95       	com	r23
 1fc:	61 95       	neg	r22
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000200 <__divmodhi4_exit>:
 200:	08 95       	ret

00000202 <__udivmodhi4>:
 202:	aa 1b       	sub	r26, r26
 204:	bb 1b       	sub	r27, r27
 206:	51 e1       	ldi	r21, 0x11	; 17
 208:	07 c0       	rjmp	.+14     	; 0x218 <__udivmodhi4_ep>

0000020a <__udivmodhi4_loop>:
 20a:	aa 1f       	adc	r26, r26
 20c:	bb 1f       	adc	r27, r27
 20e:	a6 17       	cp	r26, r22
 210:	b7 07       	cpc	r27, r23
 212:	10 f0       	brcs	.+4      	; 0x218 <__udivmodhi4_ep>
 214:	a6 1b       	sub	r26, r22
 216:	b7 0b       	sbc	r27, r23

00000218 <__udivmodhi4_ep>:
 218:	88 1f       	adc	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	5a 95       	dec	r21
 21e:	a9 f7       	brne	.-22     	; 0x20a <__udivmodhi4_loop>
 220:	80 95       	com	r24
 222:	90 95       	com	r25
 224:	bc 01       	movw	r22, r24
 226:	cd 01       	movw	r24, r26
 228:	08 95       	ret

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
