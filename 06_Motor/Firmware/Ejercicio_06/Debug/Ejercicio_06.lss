
Ejercicio_06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e5  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006df  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034a  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_2inputs>:
	
}
void init_2inputs(uint8_t input1, uint8_t input2)
{
	// Entradas
	DDRD  &= ~( _BV(input1) | _BV(input2) );
  80:	9a b1       	in	r25, 0x0a	; 10
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	a9 01       	movw	r20, r18
  88:	02 c0       	rjmp	.+4      	; 0x8e <init_2inputs+0xe>
  8a:	44 0f       	add	r20, r20
  8c:	55 1f       	adc	r21, r21
  8e:	8a 95       	dec	r24
  90:	e2 f7       	brpl	.-8      	; 0x8a <init_2inputs+0xa>
  92:	02 c0       	rjmp	.+4      	; 0x98 <init_2inputs+0x18>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <init_2inputs+0x14>
  9c:	24 2b       	or	r18, r20
  9e:	82 2f       	mov	r24, r18
  a0:	80 95       	com	r24
  a2:	98 23       	and	r25, r24
  a4:	9a b9       	out	0x0a, r25	; 10
	PORTD |=  ( _BV(input1) | _BV(input2) );
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	28 2b       	or	r18, r24
  aa:	2b b9       	out	0x0b, r18	; 11
  ac:	08 95       	ret

000000ae <init_5outputs>:
}

void init_5outputs(uint8_t output1, uint8_t output2, uint8_t output3, uint8_t output4, uint8_t output5)
{
  ae:	0f 93       	push	r16
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
	// Salidas
	DDRB |=   ( _BV(output1) | _BV(output2) | _BV(output3) | _BV(output4) | _BV(output5) );
  b4:	94 b1       	in	r25, 0x04	; 4
  b6:	e1 e0       	ldi	r30, 0x01	; 1
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	df 01       	movw	r26, r30
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <init_5outputs+0x14>
  be:	aa 0f       	add	r26, r26
  c0:	bb 1f       	adc	r27, r27
  c2:	8a 95       	dec	r24
  c4:	e2 f7       	brpl	.-8      	; 0xbe <init_5outputs+0x10>
  c6:	ef 01       	movw	r28, r30
  c8:	02 c0       	rjmp	.+4      	; 0xce <init_5outputs+0x20>
  ca:	cc 0f       	add	r28, r28
  cc:	dd 1f       	adc	r29, r29
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <init_5outputs+0x1c>
  d2:	be 01       	movw	r22, r28
  d4:	ef 01       	movw	r28, r30
  d6:	02 c0       	rjmp	.+4      	; 0xdc <init_5outputs+0x2e>
  d8:	cc 0f       	add	r28, r28
  da:	dd 1f       	adc	r29, r29
  dc:	4a 95       	dec	r20
  de:	e2 f7       	brpl	.-8      	; 0xd8 <init_5outputs+0x2a>
  e0:	ae 01       	movw	r20, r28
  e2:	ef 01       	movw	r28, r30
  e4:	02 c0       	rjmp	.+4      	; 0xea <init_5outputs+0x3c>
  e6:	cc 0f       	add	r28, r28
  e8:	dd 1f       	adc	r29, r29
  ea:	2a 95       	dec	r18
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <init_5outputs+0x38>
  ee:	9e 01       	movw	r18, r28
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <init_5outputs+0x48>
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	0a 95       	dec	r16
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <init_5outputs+0x44>
  fa:	6a 2b       	or	r22, r26
  fc:	46 2b       	or	r20, r22
  fe:	24 2b       	or	r18, r20
 100:	e2 2b       	or	r30, r18
 102:	9e 2b       	or	r25, r30
 104:	94 b9       	out	0x04, r25	; 4
	PORTB &= ~( _BV(output1) | _BV(output2) | _BV(output3) | _BV(output4) | _BV(output5) );
 106:	85 b1       	in	r24, 0x05	; 5
 108:	e0 95       	com	r30
 10a:	e8 23       	and	r30, r24
 10c:	e5 b9       	out	0x05, r30	; 5
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <main>:
void init_2inputs(uint8_t input1, uint8_t input2);
void init_5outputs(uint8_t output1, uint8_t output2, uint8_t output3, uint8_t output4, uint8_t output5);

int main(void)
{
	init_2inputs(PUSH0, PUSH1);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 40 00 	call	0x80	; 0x80 <init_2inputs>
	init_5outputs(LED1, LED2, OUTM1, OUTM2, OUTMEN);
 11e:	04 e0       	ldi	r16, 0x04	; 4
 120:	23 e0       	ldi	r18, 0x03	; 3
 122:	42 e0       	ldi	r20, 0x02	; 2
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 57 00 	call	0xae	; 0xae <init_5outputs>
	while (1)
	{
		
		if ( OFF )
 12c:	48 9b       	sbis	0x09, 0	; 9
 12e:	12 c0       	rjmp	.+36     	; 0x154 <main+0x3e>
 130:	49 9b       	sbis	0x09, 1	; 9
 132:	10 c0       	rjmp	.+32     	; 0x154 <main+0x3e>
		{
			LED1_OFF;
 134:	85 b1       	in	r24, 0x05	; 5
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	85 b9       	out	0x05, r24	; 5
			LED2_OFF;
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	85 b9       	out	0x05, r24	; 5
			
			OUTM1_OFF;
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	85 b9       	out	0x05, r24	; 5
			OUTM2_OFF;
 146:	85 b1       	in	r24, 0x05	; 5
 148:	87 7f       	andi	r24, 0xF7	; 247
 14a:	85 b9       	out	0x05, r24	; 5
			OUTMEN_OFF;
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	8f 7e       	andi	r24, 0xEF	; 239
 150:	85 b9       	out	0x05, r24	; 5
 152:	3b c0       	rjmp	.+118    	; 0x1ca <main+0xb4>
		}
			else if ( CW )
 154:	48 9b       	sbis	0x09, 0	; 9
 156:	12 c0       	rjmp	.+36     	; 0x17c <main+0x66>
 158:	49 99       	sbic	0x09, 1	; 9
 15a:	10 c0       	rjmp	.+32     	; 0x17c <main+0x66>
			{
				LED1_OFF;
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	85 b9       	out	0x05, r24	; 5
				LED2_ON;
 162:	85 b1       	in	r24, 0x05	; 5
 164:	82 60       	ori	r24, 0x02	; 2
 166:	85 b9       	out	0x05, r24	; 5
			
				OUTM1_ON;
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	85 b9       	out	0x05, r24	; 5
				OUTM2_OFF;
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	87 7f       	andi	r24, 0xF7	; 247
 172:	85 b9       	out	0x05, r24	; 5
				OUTMEN_ON;
 174:	85 b1       	in	r24, 0x05	; 5
 176:	80 61       	ori	r24, 0x10	; 16
 178:	85 b9       	out	0x05, r24	; 5
 17a:	27 c0       	rjmp	.+78     	; 0x1ca <main+0xb4>
			}
				else if ( CCW )
 17c:	48 99       	sbic	0x09, 0	; 9
 17e:	12 c0       	rjmp	.+36     	; 0x1a4 <main+0x8e>
 180:	49 9b       	sbis	0x09, 1	; 9
 182:	10 c0       	rjmp	.+32     	; 0x1a4 <main+0x8e>
				{
					LED1_ON;
 184:	85 b1       	in	r24, 0x05	; 5
 186:	81 60       	ori	r24, 0x01	; 1
 188:	85 b9       	out	0x05, r24	; 5
					LED2_OFF;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	85 b9       	out	0x05, r24	; 5
					
					OUTM1_OFF;
 190:	85 b1       	in	r24, 0x05	; 5
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	85 b9       	out	0x05, r24	; 5
					OUTM2_ON;
 196:	85 b1       	in	r24, 0x05	; 5
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	85 b9       	out	0x05, r24	; 5
					OUTMEN_ON;
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	13 c0       	rjmp	.+38     	; 0x1ca <main+0xb4>
				}
					else if ( STOP )
 1a4:	48 99       	sbic	0x09, 0	; 9
 1a6:	11 c0       	rjmp	.+34     	; 0x1ca <main+0xb4>
 1a8:	49 99       	sbic	0x09, 1	; 9
 1aa:	0f c0       	rjmp	.+30     	; 0x1ca <main+0xb4>
					{
						LED1_ON;
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	85 b9       	out	0x05, r24	; 5
						LED2_ON;
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	85 b9       	out	0x05, r24	; 5
						
						OUTM1_ON;
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	85 b9       	out	0x05, r24	; 5
						OUTM2_OFF;
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	85 b9       	out	0x05, r24	; 5
						OUTMEN_OFF;
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8f 7e       	andi	r24, 0xEF	; 239
 1c8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	87 e8       	ldi	r24, 0x87	; 135
 1cc:	93 e1       	ldi	r25, 0x13	; 19
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0xb8>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0xbe>
 1d4:	00 00       	nop
 1d6:	aa cf       	rjmp	.-172    	; 0x12c <main+0x16>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
